@model IEnumerable<LayoutViewModel>

@{
    ViewData["Title"] = "Book Seats";
}

<h2>Book Seats</h2>

<div>
    <select id="layoutDropdown">
        <option value="">Select Layout</option>
        @foreach (var layout in Model)
        {
            <option value="@layout.Id">@layout.Name</option>
        }
    </select>
</div>

<div id="imageContainer" style="position: relative; display: none;">
    <img id="layoutImage" src="" alt="Layout Image" style="display: none;" />
    <canvas id="officeLayoutCanvas" style="position: absolute; top: 0; left: 0;"></canvas>
</div>

<div id="bookingPopup" style="display: none;">
    <h3>Book Seat</h3>
    <form id="bookingForm">
        <label for="startTime">Start Time:</label>
        <input type="datetime-local" id="startTime" name="startTime" required /><br />
        <label for="endTime">End Time:</label>
        <input type="datetime-local" id="endTime" name="endTime" required /><br />
        <input type="hidden" id="seatX" name="seatX" />
        <input type="hidden" id="seatY" name="seatY" />
        <input type="hidden" id="layoutId" name="layoutId" />
        <button type="submit">Book</button>
        <button type="button" onclick="closePopup()">Cancel</button>
    </form>
</div>

<script>
    const layoutDropdown = document.getElementById('layoutDropdown');
    const imageContainer = document.getElementById('imageContainer');
    const layoutImage = document.getElementById('layoutImage');
    const canvas = document.getElementById('officeLayoutCanvas');
    const ctx = canvas.getContext('2d');
    const bookingPopup = document.getElementById('bookingPopup');
    const bookingForm = document.getElementById('bookingForm');
    let markers = [];

    layoutDropdown.addEventListener('change', (event) => {
        const layoutId = event.target.value;
        alert(layoutId);
        if (layoutId) {
            fetch(`/Layouts/GetLayout?id=${layoutId}`)
                .then(response => response.json())
                .then(data => {
                    layoutImage.src = data.imageUrl;
                    layoutImage.onload = () => {
                        imageContainer.style.display = 'block';
                        layoutImage.style.display = 'block';
                        canvas.width = layoutImage.naturalWidth;
                        canvas.height = layoutImage.naturalHeight;
                        draw();
                        fetchMarkers(layoutId);
                    };
                });
        } else {
            imageContainer.style.display = 'none';
        }
    });

    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(layoutImage, 0, 0, canvas.width, canvas.height);
        drawMarkers();
    }

    function drawMarkers() {
        markers.forEach(marker => {
            ctx.beginPath();
            ctx.arc(marker.x, marker.y, 5, 0, 2 * Math.PI);
            ctx.fillStyle = 'red';
            ctx.fill();
            canvas.addEventListener('click', event => handleMarkerClick(event, marker));
        });
    }

    function fetchMarkers(layoutId) {
        fetch(`/Seats/GetMarkers?layoutId=${layoutId}`)
            .then(response => response.json())
            .then(data => {
                markers = data;
                drawMarkers();
            });
    }

    function handleMarkerClick(event, marker) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        const isClickedOnMarker = markers.some(m =>
            Math.abs(m.x - x) < 5 && Math.abs(m.y - y) < 5
        );

        if (isClickedOnMarker) {
            openPopup(marker.x, marker.y, layoutDropdown.value);
        }
    }

    function openPopup(x, y, layoutId) {
        document.getElementById('seatX').value = x;
        document.getElementById('seatY').value = y;
        document.getElementById('layoutId').value = layoutId;
        bookingPopup.style.display = 'block';
    }

    function closePopup() {
        bookingPopup.style.display = 'none';
    }

    bookingForm.addEventListener('submit', event => {
        event.preventDefault();
        const formData = new FormData(bookingForm);
        fetch('/Seats/BookSeat', {
            method: 'POST',
            body: formData
        }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Seat booked successfully!');
                    closePopup();
                } else {
                    alert('Failed to book seat.');
                }
            });
    });
</script>
