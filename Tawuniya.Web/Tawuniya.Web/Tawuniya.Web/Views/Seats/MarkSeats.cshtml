@model IEnumerable<LayoutViewModel>
@{
    ViewData["Title"] = "Mark Seats";
}

<h2>Mark Seats</h2>

<div>
    <button id="uploadBtn">Upload Layout</button>
    <input type="file" id="fileInput" style="display: none;" />
</div>

<div>
    <select id="layoutDropdown">
        <option value="">Select Layout</option>
        @foreach (var layout in Model)
        {
            <option value="@layout.Id">@layout.Name</option>
        }
    </select>
</div>

<div id="imageContainer" style="position: relative; display: none;">
    <img id="layoutImage" src="" alt="Layout Image" style="display: none;" />
    <canvas id="officeLayoutCanvas" style="position: absolute; top: 0; left: 0;"></canvas>
</div>

<div>
    <button id="markSeatsBtn" style="display: none;">Activate Seat Marking</button>
</div>

<script>
    const uploadBtn = document.getElementById('uploadBtn');
    const fileInput = document.getElementById('fileInput');
    const layoutDropdown = document.getElementById('layoutDropdown');
    const imageContainer = document.getElementById('imageContainer');
    const layoutImage = document.getElementById('layoutImage');
    const canvas = document.getElementById('officeLayoutCanvas');
    const ctx = canvas.getContext('2d');
    const markSeatsBtn = document.getElementById('markSeatsBtn');
    let markers = [];

    uploadBtn.addEventListener('click', () => {
        fileInput.click();
    });

    fileInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
            const formData = new FormData();
            formData.append('file', file);

            fetch('/Layouts/UploadLayout', {
                method: 'POST',
                body: formData
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Layout uploaded successfully!');
                        location.reload(); // Reload the page to refresh the dropdown options
                    } else {
                        alert('Failed to upload layout.');
                    }
                });
        }
    });

    layoutDropdown.addEventListener('change', (event) => {
        const layoutId = event.target.value;
        if (layoutId) {
            fetch(`/Layouts/GetLayout/${layoutId}`)
                .then(response => response.json())
                .then(data => {
                    layoutImage.src = data.imageUrl;
                    layoutImage.onload = () => {
                        imageContainer.style.display = 'block';
                        layoutImage.style.display = 'block';
                        canvas.width = layoutImage.naturalWidth;
                        canvas.height = layoutImage.naturalHeight;
                        draw();
                        fetchMarkers(layoutId);
                        markSeatsBtn.style.display = 'block'; // Show the button to activate seat marking
                    };
                });
        } else {
            imageContainer.style.display = 'none';
            markSeatsBtn.style.display = 'none';
        }
    });

    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(layoutImage, 0, 0, canvas.width, canvas.height);
        drawMarkers();
    }

    function drawMarkers() {
        markers.forEach(marker => {
            ctx.beginPath();
            ctx.arc(marker.x, marker.y, 5, 0, 2 * Math.PI);
            ctx.fillStyle = 'red';
            ctx.fill();
        });
    }

    function fetchMarkers(layoutId) {
        fetch(`/Seats/GetMarkers?layoutId=${layoutId}`)
            .then(response => response.json())
            .then(data => {
                markers = data;
                drawMarkers();
            });
    }

    markSeatsBtn.addEventListener('click', () => {
        canvas.addEventListener('click', markSeat);
        markSeatsBtn.style.display = 'none'; // Hide the button once marking is activated
    });

    function markSeat(event) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        ctx.beginPath();
        ctx.arc(x, y, 5, 0, 2 * Math.PI);
        ctx.fillStyle = 'red';
        ctx.fill();

        saveSeatPosition(x, y);
    }

    function saveSeatPosition(x, y) {
        const layoutId = layoutDropdown.value;
        fetch('/Seats/MarkSeat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ layoutId, x, y })
        }).then(() => {
            fetchMarkers(layoutId); // Fetch markers again after saving the new position
        });
    }
</script>
